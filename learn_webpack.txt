cài đặt webpack:
npm install --save-dev webpack
sử dụng CLI:
npm install --save-dev webpack-cli

các thành phần:
-entry - cửa khẩu: (entry point) cho biết webpack module sẽ được sử dụng để bắt đầu build những sự dependency nội bộ. webpack sẽ
tìm ra những module hoặc thư viện mà entry point phụ thuộc trực tiếp hay gián tiếp.
+ các cách để configure entry point:
 single entry: string or [string] khi chúng ta vượt qua 1 mảng files path thì chúng ta sẽ tạo ra 1 multi-main entry (nó được sử dụng khi bạn muốn
inject nhiều dependency files together and graph những dependency trong chunk)
 object syntax: được sử dụng sẽ dài dòng hơn, tuy nhiên nó sẽ có thể mở rộng trong entry in application.
"scalable webpack configuraions có thể được tái sử dụng và kết hợp đến một phần cấu hình. nó là công nghệ phổ biến trong việc sử dụng tách biệt
giữa build, enveronment, runtime
khi bạn etry object là {} khi chỉ có entries point generation by plugins
 scenarios: separate and vendor chÚng ta có thể tạo ra nhiều entrypoint. cùng với đó bạn có thể import libraries mà không sửa đổi(ví dụ: boostrap,
jquery,..) bên trong vendor.js và chúng sẽ được bundle với nhau trong cùng 1 chunk, hàm băm nôi dụng vẫn giữ nguyên, cho phép browser có thể cache
chúng riêng biệt và làm giảm thời gian reload.
 multi page application: ở trong multi-page application, server sẽ lấy new HTML document cho bạn, page sẽ reload this new document và asset sẽ
 download. tuy nhiên, việc này cho chúng ta sự lựa chọn độc lập để làm những thứ như sử dụng "optimization.splitChunks" để tạo bundle chia sẻ tài
 nguyên code giữa các page. multi-page application tái sử dụng code/ modules giữa entry points đó là điều thuận lợi từ technique, giống như entry
 point được tạo.

-output: nói với webpack nơi các file bundle sẽ được tạo ra ở folder nào. nó có thể tạo ra và đặt tên cho những file đó,
nó default: ./dist/main.js cho output file chính và folder ./dist là nơi các file sẽ được generation.
chú thích, có thể có nhiều entrypoint, nhưung chỉ có 1 output configure đặc thù.
multiple entry points: nếu ban có nhiều hơn 1 single "chunk" (multiple entrypoint or sử dụng plugins like CommonsChunkPlugin). bạn nên sử dung sự thay
thế để đảm bảo rằng mỗi 1 file sẽ có tên độc nhật.
trong trường hợp có "publicPath" của các tệp đầu ra không biết tại thời điểm compile time, có thể để trống hoặc set dynamic tại runtime thông quan
biến "__webpack_public_path__" ở entry point

-loaders: cho phép xử lý xử lý những loại file khác ở trong "module" nó có thể được sử dụng trong application của bạn
và thêm các dependency, cho phép các developer build nhiều các dependency. cho phép bạn xử lý lại các tiến trình file mà bạn đã import hoặc load lại.
loader giống như loại nhiệm vụ ở trong công cụ build, và cung cấp cách thức để tiến hành các bước build front-end. loaders có thể chuyển đổi ngôn
ngữ khác (typescript) sang javascript hoặc load inline images as data urls. hoặc cũng có thể import CSS files trực tiếp từ modules javascript.
có 3 cách sử dụng với loader:
 configuration: module.rules được sử dụng để cho phép bạn chỉ định 1 số bộ loader trong webpack configuraion.đây là cách ngắn gọn nhất để show loader
và giúp maintain code.
loader được đánh giá/ thực thi từ right => left, từ dưới lên trên.
 inline: có thể chỉ định loader với "import" statement. nó có thể override (ghi đè) lên bất kì loader, preloader , postloader từ configuration.
bởi tiền tố "!"
với tiềm tố "!" sẽ disable toàn bộ configure normal loaders.
vói tiền tố "!!" sẽ disable toàn bộ configure loader (preloader, loader, postloader)
vói tiền tố "-!" sẽ disable toàn bộ configure loader (preloader, loader) but not postloader.
 CLI: chỉ định chúng trong 1 shell command.
ví dụ: webpack --module-bind pug-loader --module-bind 'css=style-loader!css-loader'
sử dụng the pug-loader for .jade files
sử dụng style-loader and css-loader for .css files.
 tính năng của loader:
 - các loader là chuỗi các mắt xích. với mối loader ở trong mắt xích tác động sử biến bổi đến quá trình của resource. mỗi một mắt xích sẽ được thực thi
 ở thứ tự ngược lại. loader đầu tiên sẽ pass qua cùng với results tiếp tục đến loader tiếp theo và vân vân, finally webpack sẽ mong chờ webpack sẽ
 trả ra bởi loader cuối cùng của mắt xích.
 - loader có thể synchronous or asynchronous
 - loader run trên Node.js và có thể làm được nhiều thức trên đó.
 - loader có thể được config cùng với options object.
 - những module bình thường có thể export 1 loader ở trong, thêm vào đó main nomal thông qua webpack.json cùng với loader field.
 - plugins có thể cho loader nhiều features.
 - loader có thể phát ra, truyền đi nhiều file bất kì.
loader cung cấp 1 cách thức có thể customize giá trị output thông qua chức năng tiền xử lý. người dùng bây giờ có thể có sự linh hoạt trong việc như
nén, đóng gói, biên dịch ngôn ngữ


loaders gồm 2 properties:
+ test: được định nghĩa là loại file sẽ được chuyển đổi
+ use: được  định nghĩa là loại loaders nào sẽ được chuyển đổi.

-plugins : được sử dụng để chuyển đổi một số loại module, các plugins sẽ được sử dụng để thực thi các công việc rộng hơn như tối ưu hoá,
quản lý assets
-mode: setting webpack vớI các môi trường (production, development, none), bạn cũng có thể build webpack để tối ưu hoá
là xương sống của webpack. webpack được xây dựng trên giống với plugin của hệ thống mà bạn sử dụng trên configuraion webpack của bạn.
chúng được phục vụ cho mong muốn là làm tất cả những thứ mà loader không thể làm.
webpack plugin là 1 object javascriptcó method "apply". method này được gọi bởi webpack compiler, và sẽ xác thực toàn bộ vòng trong compiler.

configuraion webpack:
việc cấu hình được xử lý bởi webpack dựa trên các thuộc tính xác thực của nó.
import files thông qua require(...)
import tiện ích (plugin) trên npm thông qua require(...)
sử dụng javascript control thông qua các biểu thức ví dụ như ?: operator.
sử dụng các hằng số (constant) hoặc biến (variable) cho việc sử dụng value.
viết và thực thi các functions biên dịch 1 phần trong của configuraion.

sử dụng với angular cần:

để custom webpack cần install :
npm i @angular-builders/custom-webpack
or
npm i @angular-builders/custom-webpack@<version> (có thể thêm @version để install version mong muốn).

chỉnh sửa file angular.json:
-từ "builder": "@angular-devkit/build-angular:browser" => "builder": "@angular-builders/custom-webpack:browser", (default for ng build)
-trong architect.build.options thêm:
"customWebpackConfig": {
  "path": "./custom-webpack.config.js"
},
với 'custom-webpack.config.js' là file custom webpack configuration.
ngoài ra cũng có thể thêm configuraton cho configuration cho webpack product:
-trong architect.build.configurations.production thêm:
"customWebpackConfig": {
  "path": "./custom-webpack.prod.config.js"
},
với 'custom-webpack.prod.config.js' là file custom webpack configuration của product.

enable the configuration for ng serve
-từ "builder": "@angular-devkit/build-angular:dev-server" => "builder": "@angular-builders/custom-webpack:dev-server",
-trong serve.build.options thêm:
 "customWebpackConfig": {
  "path": "./custom-webpack.config.js"
},
-trong serve.configurations.production thêm:
"customWebpackConfig": {
  "path": "./custom-webpack.prod.config.js"
},
với 'custom-webpack.prod.config.js' là file custom webpack configuration của product.
lưu ý: khi sử dụng webpack cần sử webpack và custom-webpack có version tương ứng cới version của angular.

webpack:
công cụ giúp bạn compile các module JS. tên gọi khác "module bundler" tĩnh
webpack sử dụng cơ chế xây dụng một đồ thị phụ thuộc (dependency graph)
ánh xạ tất cả module mà dự án càn và khởi tạo một hoặc nhiều bundlers
set up:
npm i -g webpack
or
npm i --save-dev webpack
cần tạo file: webpack.config.js ở root thư mục dự án và webpack sẽ tự động hiểu nó.
nếu bạn muốn sử dụng file khác cần sửa lại lệnh trong file package.json
"scripts": {
  "build": "webpack --config [TÊN_FILE]"
}

entry:
là tên file đầu vào dể webpack biết được module đầu tiên để xây dựng đồ thị. phụ thuộc.
mặc định: ./src/index.js
ví dụ:
file webpack.config.js:
module.exports = {
	entry: '[ĐƯỜNG_DẪN_ĐẾN_ENTRY_FILE]'
}
or
module.exports = {
	entry: {
        main:  '[ĐƯỜNG_DẪN_ĐẾN_ENTRY_FILE]',
    }
}

output:
chỉ nơi file sau khi bundle sẽ dược lưu trữ và tên của file.
mặc dịnh: ./dist/main.js
ví dụ:
file webpack.config.js
module.exports = {
	entry: '[ĐƯỜNG_DẪN_ĐẾN_ENTRY_FILE]',
    output: '[ĐƯỜNG_DẪN_OUTPUT_FILE]',
}
or
const path = require('path');

module.exports = {
	entry: '[ĐƯỜNG_DẪN_ĐẾN_ENTRY_FILE]',
    output: {
    	path: path.resolve(__dirname, '[THƯ_MỤC_OUTPUT]'),
   		filename: '[TÊN_FILE_OUTPUT]'
  	},
}
lưu ý:
có thể sử dụng multi entry nhưng với output thì chỉ có một.

loader:
webpack chỉ hiểu được file js và json. leaer giúp webpack xác dịnh được các loại file khác nhau. và thêm nó vào trong ứng dụng.
có 2 phương thức:
test: chỉ ra file sẽ đưuọc chuyển đổi.
user: chỉ loader được sử dụng để chuyển đổi.

ví dụ:
file webpack.config.js
module.exports = {
	entry: '[ĐƯỜNG_DẪN_ĐẾN_ENTRY_FILE]',
    output: '[ĐƯỜNG_DẪN_OUTPUT_FILE]',
    rules: [
  		{
 			test: /\.txt$/,
			use: 'raw-loader'
 		},
  	]
}

một số loader:
babel-loader: transpile ES2015 code sử dụng Babel
ts-loader hoặc awesome-typescript-loader: load file Typescript
css-loader: load file CSS
style-loader: Add exports of a module as style to DOM
file-loader: Emits the file into the output folder and returns the (relative) URL
html-loader: Exports HTML as string, require references to static resources

plugins:
để làm những nhiệm vụ lớn hơn như tối ưu bundle, quản lý asset
đưa các biến môi trường  để sử dụng được 1 plugin càn "require()"
và thêm nó vào mảng plugins.
ví dụ:
file webpack.config.js:
const HtmlWebpackPlugin = require('html-webpack-plugin') // tạo file html và tự động inject các file sau khi bundle
module.exports = {
	entry: '[ĐƯỜNG_DẪN_ĐẾN_ENTRY_FILE]',
    output: '[ĐƯỜNG_DẪN_OUTPUT_FILE]',
    rules: [
  		{
 			test: /\.txt$/,
			use: 'raw-loader'
 		},
  	],
 	plugins: [ new HtmlWebpackPlugin() ]
}

mode:
nhằm mục đích xác định môi trương:
-development
-production
-none
ví dụ:
file webpack.config.js:
const HtmlWebpackPlugin = require('html-webpack-plugin') // tạo file html và tự động inject các file sau khi bundle
module.exports = {
	mode: 'development'
	entry: '[ĐƯỜNG_DẪN_ĐẾN_ENTRY_FILE]',
    output: '[ĐƯỜNG_DẪN_OUTPUT_FILE]',
    rules: [
  		{
 			test: /\.txt$/,
			use: 'raw-loader'
 		},
  	],
 	plugins: [ new HtmlWebpackPlugin() ]
}
